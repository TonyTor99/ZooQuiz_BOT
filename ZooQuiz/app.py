import telebot
from telebot import types
from config import TOKEN, quiz_data, questions, review, result
from functions import get_totem_animal, get_animal_photo


bot = telebot.TeleBot(TOKEN)

@bot.message_handler(commands=['start'])
# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É start
def start(message: telebot.types.Message):
    photo = open('.\\Photos\\greet1.jpg', 'rb')
    bot.send_photo(message.chat.id, photo, caption=f'–ü—Ä–∏–≤–µ—Ç {message.chat.username}! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ú–∞–Ω—É–ª –¢–∏–º–æ—à–∞üê±. –Ø –∂–∏–≤—É –≤ –ú–æ—Å–∫–æ–≤—Å–∫–æ–º –ó–æ–æ–ø–∞—Ä–∫–µ'
' –∏ —Ö–æ—á—É –ø–æ–º–æ—á—å —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å –∫–∞–∫–æ–µ —Ç–≤–æ–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ! –ê –ø–æ—Ç–æ–º —è —Å–¥–µ–ª–∞—é —Ç–µ–±–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—ã –Ω—É –ø—Ä–æ–æ–æ—Å—Ç–æ –Ω–µ —Å–º–æ–∂–µ—à—å –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –ú—É—Ä.'
' –î—É–º–∞—é –Ω–∞–º –ø–æ—Ä–∞ –Ω–∞—á–∏–Ω–∞—Ç—å. –ù–∞–∂–º–∏ –Ω–∞ —ç—Ç—É –∫–Ω–æ–ø–æ—á–∫—É –∏ –º—ã –Ω–∞—á–Ω–µ–º: /letsgo')

@bot.message_handler(commands=['letsgo'])
# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É letsgo, –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ª–æ–≤–∞—Ä—å –∏ –Ω–∞—á–∏–Ω–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É
def start_quiz(message):
    user_id = message.chat.id
    if user_id not in quiz_data:
        quiz_data[user_id] = {
            'current_question': 0,
            'answers': []
        }
    send_questions(user_id)

@bot.message_handler(commands=['getreview'])
def get_review(admin_id):
    admin_id = '307658038'
    for rev in review:
        bot.send_message(admin_id, rev)

def send_questions(user_id):
    user = quiz_data[user_id]
    question_index = user['current_question']
    try:
        #–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
        if question_index < len(questions):
            question_data = questions[question_index]
            question_text = question_data['question']
            answers = question_data['answer']

            markup = types.InlineKeyboardMarkup()
            for answer in answers.keys():
                markup.add(types.InlineKeyboardButton(text=answer, callback_data=f'{question_index}_{answer}'))
            bot.send_message(user_id, question_text, reply_markup=markup)
        else:
            #–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç, —Ç–æ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –≤—ã–≤–æ–¥–∏–º –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –¥–∞–ª—å–Ω–µ–π—à–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
            result[user_id] = get_totem_animal(user['answers'])
            totem_animal = get_totem_animal(user['answers'])
            photo = open(get_animal_photo(totem_animal), 'rb')

            markup_end = types.InlineKeyboardMarkup()
            markup_end.add(types.InlineKeyboardButton(text='–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö', callback_data='share'))
            markup_end.add(types.InlineKeyboardButton(text='–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –ü—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∏ –≤ –ú–æ—Å–∫–æ–≤—Å–∫–æ–º –∑–æ–æ–ø–∞—Ä–∫–µ', url='https://moscowzoo.ru/about/guardianship'))
            markup_end.add(types.InlineKeyboardButton(text='–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤', callback_data='review'))
            markup_end.add(types.InlineKeyboardButton(text='–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –ó–æ–æ–ø–∞—Ä–∫–∞', callback_data='question'))
            markup_end.add(types.InlineKeyboardButton(text='–ü—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∑–∞–Ω–æ–≤–æ', callback_data='replay'))

            bot.send_photo(user_id, photo, f'–í–ê–ê–ê–£! –¢–≤–æ—ë —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ —ç—Ç–æ - {result[user_id]}!!! –ó–Ω–∞–µ—à—å –≤–µ–¥—å, —á—Ç–æ —Å–≤–æ–∏–º –±–ª–∏–∑–∫–∏–º –ø–æ –¥—É—Ö—É –Ω—É–∂–Ω–æ –ø–æ–º–æ–≥–∞—Ç—å? –ö–æ–Ω–µ–µ–µ—á–Ω–æ –∑–Ω–∞–µ—à—å!'
    f'–¢–∞–∫ –≤–æ—Ç. –•–æ—á—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ–±–µ —Å—Ç–∞—Ç—å –µ–≥–æ –æ–ø–µ–∫—É–Ω–æ–º. –í—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞–Ω–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ, –∏ –µ—â–µ –∫–æ–µ —á—Ç–æ, —Ç—ã —Å–º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –ø–æ —Å—Å—ã–ª–æ—á–∫–µ –Ω–∏–∂–µ', reply_markup=markup_end)
    except TypeError:
        quiz_data[user_id]['current_question'] = 0
        quiz_data[user_id]['answers'] = []
        bot.send_message(user_id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞( –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')

# –õ–æ–≤–∏–º –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.callback_query_handler(func=lambda call: '_' in call.data)
def callback_query1(call):
    user_id = call.message.chat.id
    user = quiz_data[user_id]

    question_index, user_answer = call.data.split('_')
    question_index = int(question_index)

    user['answers'].append(user_answer)
    user['current_question'] = question_index + 1
    send_questions(user_id)

# –õ–æ–≤–∏–º –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞, –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –ó–æ–æ–ø–∞—Ä–∫–∞
@bot.callback_query_handler(func=lambda call: call.data == 'replay' or call.data == 'review' or call.data == 'question')
def replay_review(call):
    user_id = call.message.chat.id
    if 'replay' == call.data:
        if user_id in quiz_data:
            del result[user_id]
            quiz_data[user_id]['current_question'] = 0
            quiz_data[user_id]['answers'] = []
            send_questions(user_id)
        else:
            bot.send_message(user_id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.")

    if 'review' == call.data:
        mesg = bot.send_message(user_id, '–û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –≤ –≥—Ä–∞—Ñ–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ –¥–ª—è –≤–∞—Å)\n–≠—Ç–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–Ω–æ–Ω–∏–º–Ω–æ')
        bot.register_next_step_handler(mesg, add_review)

    if 'question' == call.data:
        ques = bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ –≥—Ä–∞—Ñ–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n<–í–∞—à –≤–æ–ø—Ä–æ—Å>\n<@UserName –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏>')
        bot.register_next_step_handler(ques, send_ques)

def add_review(message):
    review.append(message.text)
    bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –æ—Ç–∑—ã–≤!')

def send_ques(message):
    user_id = message.chat.id
    admin_id = '307658038'
    ques = f'–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: {result[user_id]}\n–°–æ–æ–±—â–µ–Ω–∏–µ: {message.text}'
    bot.send_message(chat_id=admin_id, text=ques)
    bot.send_message(user_id, '–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!')

# –õ–æ–≤–∏–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–µ–ª–∏—Å—Ç—å—Å—è
@bot.callback_query_handler(func=lambda call: call.data == 'share')
def share_result(call):
    user = quiz_data[call.message.chat.id]
    totem_animal = get_totem_animal(user['answers'])
    user_id = call.message.chat.id
    result[user_id] = get_totem_animal(quiz_data[user_id]['answers'])
    photo = open(get_animal_photo(totem_animal), 'rb')
    message_text = f'–ú–æ–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ {result[user_id]}! –ü—Ä–æ–π–¥–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∏ —É–∑–Ω–∞–π —Å–≤–æ—ë —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ!\nhttps://t.me/MosZooQuiz_BOT'

    share_mark = types.InlineKeyboardMarkup()
    share_mark.row(types.InlineKeyboardButton('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ –¢–µ–ª–µ–≥—Ä–∞–º', switch_inline_query=message_text))
    share_mark.row(types.InlineKeyboardButton('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤–æ –í–∫–æ–Ω—Ç–∞–∫—Ç–µ', url=f'https://vk.com/share.php?url=https://ltdfoto.ru/image/hneZiU&title={message_text}'))

    bot.send_photo(user_id, photo, caption=message_text, reply_markup=share_mark)


bot.polling(none_stop=True)
